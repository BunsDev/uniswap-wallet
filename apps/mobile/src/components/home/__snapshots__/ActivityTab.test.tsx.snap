// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActivityTab renders without error 1`] = `
<View
  sentry-label="Flex"
  style={
    [
      {
        "alignItems": "stretch",
        "display": "flex",
        "flexDirection": "column",
        "flexGrow": 1,
        "justifyContent": "flex-start",
        "paddingHorizontal": 24,
      },
    ]
  }
>
  <View
    style={
      {
        "flex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={null}
      ListFooterComponent={
        <React.Fragment>
          <Memo
            repeat={4}
          />
          <ForwardRef
            height={0.1}
          />
        </React.Fragment>
      }
      applyWindowCorrection={[Function]}
      canChangeSize={true}
      contentContainerStyle={
        {
          "backgroundColor": undefined,
          "minHeight": 1,
          "minWidth": 1,
        }
      }
      contentHeight={0}
      contentWidth={0}
      data={
        [
          {
            "id": 1,
            "itemType": "LOADING",
          },
          {
            "id": 2,
            "itemType": "LOADING",
          },
          {
            "id": 3,
            "itemType": "LOADING",
          },
          {
            "id": 4,
            "itemType": "LOADING",
          },
        ]
      }
      dataProvider={
        DataProvider {
          "_data": [
            {
              "id": 1,
              "itemType": "LOADING",
            },
            {
              "id": 2,
              "itemType": "LOADING",
            },
            {
              "id": 3,
              "itemType": "LOADING",
            },
            {
              "id": 4,
              "itemType": "LOADING",
            },
          ],
          "_firstIndexToProcess": 0,
          "_hasStableIds": true,
          "_requiresDataChangeHandling": false,
          "_size": 4,
          "getStableId": [Function],
          "rowHasChanged": [Function],
        }
      }
      disableRecycling={false}
      estimatedItemSize={92}
      extendedState={{}}
      externalScrollView={[Function]}
      finalRenderAheadOffset={250}
      forceNonDeterministicRendering={true}
      getItemType={[Function]}
      horizontal={false}
      initialOffset={0}
      initialRenderIndex={0}
      isHorizontal={false}
      keyExtractor={[Function]}
      layoutProvider={
        GridLayoutProviderWithProps {
          "_acceptableRelayoutDelta": 1,
          "_getHeightOrWidth": [Function],
          "_getLayoutTypeForIndex": [Function],
          "_getSpan": [Function],
          "_maxSpan": 1,
          "_setLayoutForType": [Function],
          "_tempDim": {
            "height": 0,
            "width": 0,
          },
          "averageWindow": AverageWindow {
            "currentAverage": 92,
            "currentCount": 1,
            "inputValues": [
              92,
            ],
            "nextIndex": 1,
          },
          "defaultEstimatedItemSize": 100,
          "layoutObject": {
            "size": undefined,
            "span": undefined,
          },
          "props": {
            "ListEmptyComponent": null,
            "ListFooterComponent": <React.Fragment>
              <Memo
                repeat={4}
              />
              <ForwardRef
                height={0.1}
              />
            </React.Fragment>,
            "data": [
              {
                "id": 1,
                "itemType": "LOADING",
              },
              {
                "id": 2,
                "itemType": "LOADING",
              },
              {
                "id": 3,
                "itemType": "LOADING",
              },
              {
                "id": 4,
                "itemType": "LOADING",
              },
            ],
            "estimatedItemSize": 92,
            "getItemType": [Function],
            "keyExtractor": [Function],
            "numColumns": 1,
            "onContentSizeChange": undefined,
            "onScroll": [Function],
            "renderItem": [Function],
            "sentry-label": "ReanimatedFlashList",
            "showsVerticalScrollIndicator": false,
          },
          "shouldRefreshWithAnchoring": true,
        }
      }
      maxRenderAhead={750}
      numColumns={1}
      onEndReached={[Function]}
      onEndReachedThreshold={0}
      onEndReachedThresholdRelative={0}
      onItemLayout={[Function]}
      onLayout={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onSizeChanged={[Function]}
      onVisibleIndicesChanged={[Function]}
      removeClippedSubviews={false}
      renderAheadOffset={0}
      renderAheadStep={250}
      renderContentContainer={[Function]}
      renderItem={[Function]}
      renderItemContainer={[Function]}
      rowRenderer={[Function]}
      scrollEventThrottle={16}
      scrollThrottle={16}
      scrollViewProps={
        {
          "contentContainerStyle": {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
          },
          "onLayout": [Function],
          "onScrollBeginDrag": [Function],
          "refreshControl": undefined,
          "style": {
            "minHeight": 1,
            "minWidth": 1,
          },
        }
      }
      sentry-label="ReanimatedFlashList"
      showsVerticalScrollIndicator={false}
      style={
        {
          "minHeight": 1,
          "minWidth": 1,
        }
      }
      suppressBoundedSizeException={true}
      windowCorrectionConfig={
        {
          "applyToInitialOffset": true,
          "applyToItemScroll": true,
          "value": {
            "endCorrection": 0,
            "startCorrection": 0,
            "windowShift": -0,
          },
        }
      }
    >
      <View>
        <View
          style={
            {
              "flexDirection": "column",
            }
          }
        >
          <AutoLayoutView
            enableInstrumentation={false}
            horizontal={false}
            onBlankAreaEvent={[Function]}
            onLayout={[Function]}
            renderAheadOffset={0}
            scrollOffset={0}
            style={
              {
                "height": 0,
                "width": 0,
              }
            }
            windowSize={0}
          />
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;

exports[`ActivityTab renders without error 2`] = `
<View
  sentry-label="Flex"
  style={
    [
      {
        "alignItems": "stretch",
        "display": "flex",
        "flexDirection": "column",
        "flexGrow": 1,
        "justifyContent": "flex-start",
        "paddingHorizontal": 24,
      },
    ]
  }
>
  <View
    style={
      {
        "flex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <ForwardRef
          flexGrow={1}
        >
          <EmptyState
            buttonLabel="Receive tokens or NFTs"
            description="When you approve, trade, or transfer tokens or NFTs, your transactions will appear here."
            icon={<Memo />}
            onPress={[Function]}
            title="No activity yet"
          />
        </ForwardRef>
      }
      ListFooterComponent={
        <React.Fragment>
          <ForwardRef
            height={0.1}
          />
        </React.Fragment>
      }
      applyWindowCorrection={[Function]}
      canChangeSize={true}
      contentContainerStyle={
        {
          "backgroundColor": undefined,
          "minHeight": 1,
          "minWidth": 1,
        }
      }
      contentHeight={0}
      contentWidth={0}
      data={
        [
          {
            "itemType": "HEADER",
            "title": "February 1990",
          },
          {
            "addedTime": 634722508000,
            "chainId": 1,
            "from": "0x82D56A352367453f74FC0dC7B071b311da373Fa6",
            "hash": "0xaef17b4b697be91ab3d7eca4b92fa53efeb2da6b",
            "id": "0xaef17b4b697be91ab3d7eca4b92fa53efeb2da6b",
            "options": {
              "request": {},
            },
            "status": "confirmed",
            "typeInfo": {
              "approvalAmount": "1",
              "spender": "0x55f4B664C68F398f9e81EFf63ef4444A1A184F98",
              "tokenAddress": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
              "type": "approve",
            },
          },
          {
            "addedTime": 634722508000,
            "chainId": 1,
            "from": "0x82D56A352367453f74FC0dC7B071b311da373Fa6",
            "hash": "0x8123abfa76b2bd459df69d4cffefde0e51b81cf2",
            "id": "0x8123abfa76b2bd459df69d4cffefde0e51b81cf2",
            "options": {
              "request": {},
            },
            "status": "confirmed",
            "typeInfo": {
              "expectedOutputCurrencyAmountRaw": "1000000000000000000",
              "inputCurrencyAmountRaw": "1000000000000000000",
              "inputCurrencyId": "1-0x6B175474E89094C44Da98b954EedeAC495271d0F",
              "minimumOutputCurrencyAmountRaw": "1000000000000000000",
              "outputCurrencyId": "1-0x6B175474E89094C44Da98b954EedeAC495271d0F",
              "tradeType": 0,
              "transactedUSDValue": 1,
              "type": "swap",
            },
          },
        ]
      }
      dataProvider={
        DataProvider {
          "_data": [
            {
              "itemType": "HEADER",
              "title": "February 1990",
            },
            {
              "addedTime": 634722508000,
              "chainId": 1,
              "from": "0x82D56A352367453f74FC0dC7B071b311da373Fa6",
              "hash": "0xaef17b4b697be91ab3d7eca4b92fa53efeb2da6b",
              "id": "0xaef17b4b697be91ab3d7eca4b92fa53efeb2da6b",
              "options": {
                "request": {},
              },
              "status": "confirmed",
              "typeInfo": {
                "approvalAmount": "1",
                "spender": "0x55f4B664C68F398f9e81EFf63ef4444A1A184F98",
                "tokenAddress": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
                "type": "approve",
              },
            },
            {
              "addedTime": 634722508000,
              "chainId": 1,
              "from": "0x82D56A352367453f74FC0dC7B071b311da373Fa6",
              "hash": "0x8123abfa76b2bd459df69d4cffefde0e51b81cf2",
              "id": "0x8123abfa76b2bd459df69d4cffefde0e51b81cf2",
              "options": {
                "request": {},
              },
              "status": "confirmed",
              "typeInfo": {
                "expectedOutputCurrencyAmountRaw": "1000000000000000000",
                "inputCurrencyAmountRaw": "1000000000000000000",
                "inputCurrencyId": "1-0x6B175474E89094C44Da98b954EedeAC495271d0F",
                "minimumOutputCurrencyAmountRaw": "1000000000000000000",
                "outputCurrencyId": "1-0x6B175474E89094C44Da98b954EedeAC495271d0F",
                "tradeType": 0,
                "transactedUSDValue": 1,
                "type": "swap",
              },
            },
          ],
          "_firstIndexToProcess": 0,
          "_hasStableIds": true,
          "_requiresDataChangeHandling": true,
          "_size": 3,
          "getStableId": [Function],
          "rowHasChanged": [Function],
        }
      }
      disableRecycling={false}
      estimatedItemSize={92}
      extendedState={{}}
      externalScrollView={[Function]}
      finalRenderAheadOffset={250}
      forceNonDeterministicRendering={true}
      getItemType={[Function]}
      horizontal={false}
      initialOffset={0}
      initialRenderIndex={0}
      isHorizontal={false}
      keyExtractor={[Function]}
      layoutProvider={
        GridLayoutProviderWithProps {
          "_acceptableRelayoutDelta": 1,
          "_getHeightOrWidth": [Function],
          "_getLayoutTypeForIndex": [Function],
          "_getSpan": [Function],
          "_maxSpan": 1,
          "_setLayoutForType": [Function],
          "_tempDim": {
            "height": 0,
            "width": 0,
          },
          "averageWindow": AverageWindow {
            "currentAverage": 92,
            "currentCount": 1,
            "inputValues": [
              92,
            ],
            "nextIndex": 1,
          },
          "defaultEstimatedItemSize": 100,
          "layoutObject": {
            "size": undefined,
            "span": undefined,
          },
          "props": {
            "ListEmptyComponent": <ForwardRef
              flexGrow={1}
            >
              <EmptyState
                buttonLabel="Receive tokens or NFTs"
                description="When you approve, trade, or transfer tokens or NFTs, your transactions will appear here."
                icon={<Memo />}
                onPress={[Function]}
                title="No activity yet"
              />
            </ForwardRef>,
            "ListFooterComponent": <React.Fragment>
              <ForwardRef
                height={0.1}
              />
            </React.Fragment>,
            "data": [
              {
                "itemType": "HEADER",
                "title": "February 1990",
              },
              {
                "addedTime": 634722508000,
                "chainId": 1,
                "from": "0x82D56A352367453f74FC0dC7B071b311da373Fa6",
                "hash": "0xaef17b4b697be91ab3d7eca4b92fa53efeb2da6b",
                "id": "0xaef17b4b697be91ab3d7eca4b92fa53efeb2da6b",
                "options": {
                  "request": {},
                },
                "status": "confirmed",
                "typeInfo": {
                  "approvalAmount": "1",
                  "spender": "0x55f4B664C68F398f9e81EFf63ef4444A1A184F98",
                  "tokenAddress": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
                  "type": "approve",
                },
              },
              {
                "addedTime": 634722508000,
                "chainId": 1,
                "from": "0x82D56A352367453f74FC0dC7B071b311da373Fa6",
                "hash": "0x8123abfa76b2bd459df69d4cffefde0e51b81cf2",
                "id": "0x8123abfa76b2bd459df69d4cffefde0e51b81cf2",
                "options": {
                  "request": {},
                },
                "status": "confirmed",
                "typeInfo": {
                  "expectedOutputCurrencyAmountRaw": "1000000000000000000",
                  "inputCurrencyAmountRaw": "1000000000000000000",
                  "inputCurrencyId": "1-0x6B175474E89094C44Da98b954EedeAC495271d0F",
                  "minimumOutputCurrencyAmountRaw": "1000000000000000000",
                  "outputCurrencyId": "1-0x6B175474E89094C44Da98b954EedeAC495271d0F",
                  "tradeType": 0,
                  "transactedUSDValue": 1,
                  "type": "swap",
                },
              },
            ],
            "estimatedItemSize": 92,
            "getItemType": [Function],
            "keyExtractor": [Function],
            "numColumns": 1,
            "onContentSizeChange": undefined,
            "onScroll": [Function],
            "renderItem": [Function],
            "sentry-label": "ReanimatedFlashList",
            "showsVerticalScrollIndicator": false,
          },
          "shouldRefreshWithAnchoring": true,
        }
      }
      maxRenderAhead={750}
      numColumns={1}
      onEndReached={[Function]}
      onEndReachedThreshold={0}
      onEndReachedThresholdRelative={0}
      onItemLayout={[Function]}
      onLayout={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onSizeChanged={[Function]}
      onVisibleIndicesChanged={[Function]}
      removeClippedSubviews={false}
      renderAheadOffset={0}
      renderAheadStep={250}
      renderContentContainer={[Function]}
      renderItem={[Function]}
      renderItemContainer={[Function]}
      rowRenderer={[Function]}
      scrollEventThrottle={16}
      scrollThrottle={16}
      scrollViewProps={
        {
          "contentContainerStyle": {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
          },
          "onLayout": [Function],
          "onScrollBeginDrag": [Function],
          "refreshControl": undefined,
          "style": {
            "minHeight": 1,
            "minWidth": 1,
          },
        }
      }
      sentry-label="ReanimatedFlashList"
      showsVerticalScrollIndicator={false}
      style={
        {
          "minHeight": 1,
          "minWidth": 1,
        }
      }
      suppressBoundedSizeException={true}
      windowCorrectionConfig={
        {
          "applyToInitialOffset": true,
          "applyToItemScroll": true,
          "value": {
            "endCorrection": 0,
            "startCorrection": 0,
            "windowShift": -0,
          },
        }
      }
    >
      <View>
        <View
          style={
            {
              "flexDirection": "column",
            }
          }
        >
          <AutoLayoutView
            enableInstrumentation={false}
            horizontal={false}
            onBlankAreaEvent={[Function]}
            onLayout={[Function]}
            renderAheadOffset={0}
            scrollOffset={0}
            style={
              {
                "height": 0,
                "width": 0,
              }
            }
            windowSize={0}
          />
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;
